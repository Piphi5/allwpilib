// The model has to be configured here because $. directives won't work if the
// definition is not at the top level. See https://github.com/gradle/gradle/issues/1002.
model {
    components {
        sysid(NativeExecutableSpec) {
            // Setup the sources and headers for the application.
            sources.cpp {
                source {
                    srcDirs 'src/main/native/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders.srcDirs 'src/main/native/include'
            }
        }
    }
    testSuites {
        sysidTest(GoogleTestTestSuiteSpec) {
            testing $.components.sysid
            sources.cpp.source {
                srcDirs "src/test/native/cpp"
                include "**/*.cpp"
            }
        }
    }
    binaries {
        withType(NativeBinarySpec).all {
            // Only build desktop platforms.
            if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio
            || it.targetPlatform.name == nativeUtils.wpi.platforms.raspbian
            || it.targetPlatform.name == nativeUtils.wpi.platforms.aarch64bionic) {
                it.buildable = false
                return
            }

            // Add WPILib dependencies.
            lib project: ':ntcore', library: 'ntcore', linkage: 'static'
            lib project: ':wpimath', library: 'wpimath', linkage: 'static'
            lib project: ':glass', library: 'glass', linkage: 'static'
            lib project: ':wpiutil', library: 'wpiutil', linkage: 'static'
            lib project: ':wpigui', library: 'wpigui', linkage: 'static'
            nativeUtils.useRequiredLibrary(it, 'imgui_static')

            // Add platform-specific renderer dependencies.
            if (it.targetPlatform.operatingSystem.isWindows()) {
                it.linker.args << 'Gdi32.lib' << 'Shell32.lib' << 'd3d11.lib' << 'd3dcompiler.lib'
            } else if (it.targetPlatform.operatingSystem.isMacOsX()) {
                it.linker.args << '-framework' << 'Metal' << '-framework' << 'MetalKit' <<
                        '-framework' << 'Cocoa' << '-framework' << 'IOKit' << '-framework' <<
                        'CoreFoundation' << '-framework' << 'CoreVideo' << '-framework' << 'QuartzCore'
            } else {
                it.linker.args << '-lX11'
            }
        }
        withType(GoogleTestTestSuiteBinarySpec).all {
            it.cppCompiler.define("RUNNING_SYSID_TESTS")
        }
    }
}
